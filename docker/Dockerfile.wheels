ARG UBUNTU_VERSION
ARG ARCH
ARG DLIB_VERSION
ARG BUILD_FROM
FROM roflcoopter/${ARCH}-dlib:${DLIB_VERSION} as dlib
FROM ${BUILD_FROM} as build

COPY --from=dlib /wheels /wheels

ARG ARCH
ARG EXTRA_PIP_ARGS=""

ENV \
  DEBIAN_FRONTEND=noninteractive \
  PIP_IGNORE_INSTALLED=0

ARG BUILDPLATFORM
RUN \
  echo "Build platform: $BUILDPLATFORM" && \
  echo "Target architecture: $ARCH" && \
  if [ "$BUILDPLATFORM" = "linux/amd64" ]; then \
  case "$ARCH" in \
  aarch64|rpi3) echo "Crossbuilding!" && cross-build-start;; \
  esac \
  fi

RUN apt-get -yqq update && apt-get install -yq --no-install-recommends \
  software-properties-common \
  gnupg \
  cmake \
  curl \
  python3 \
  python3-dev \
  python3-pip \
  python3-setuptools \
  python3-wheel \
  libgirepository1.0-dev\
  libcairo2-dev \
  # Install Python 3.9 if it doesn't exist
  && if [ ! -f /usr/local/bin/python3.9 ]; then \
  add-apt-repository ppa:deadsnakes/ppa -y && \
  apt-get update && apt-get install -y --no-install-recommends \
  python3.9 \
  python3.9-distutils ; \
  fi \
  && python3 -m pip install --upgrade pip \
  && python3.9 -m pip install --upgrade pip \
  && apt-get autoremove -y && apt-get clean -y

# Pip does not find our OpenCV built from source so we fake it here
ARG OPENCV_VERSION
ADD docker/opencv-python-headless-setup.py /opencv-python-headless/setup.py
ADD requirements.txt requirements.txt
# Set OpenCV Version
RUN sed -i "s/OPENCV_VERSION=/OPENCV_VERSION=\"$OPENCV_VERSION\"/" /opencv-python-headless/setup.py
RUN echo "opencv-python-headless==$OPENCV_VERSION" >> /requirements.txt

# We need to setup Rust compiler for bcrypt
# A tmpfs is needed: https://github.com/rust-lang/cargo/issues/8719
ADD requirements-3.9.txt requirements-3.9.txt
RUN --mount=type=tmpfs,target=/root/.cargo curl https://sh.rustup.rs -sSf | bash -s -- -y \
  && . $HOME/.cargo/env \
  && mkdir -p /wheels /wheels-3.9 \
  && if [ "$ARCH" = "amd64" ] || [ "$ARCH" = "amd64-cuda" ]; then export PLATFORM="x86_64"; \
  elif [ "$ARCH" = "armhf" ] || [ "$ARCH" = "rpi3" ]; then export PLATFORM="armv7l"; \
  else export PLATFORM="$ARCH"; fi \
  \
  && python3 -m pip wheel --wheel-dir=/wheels --find-links=/wheels ${EXTRA_PIP_ARGS} /opencv-python-headless -r /requirements.txt \
  && python3.9 -m pip wheel \
  --extra-index-url https://google-coral.github.io/py-repo/ \
  --wheel-dir=/wheels-3.9 \
  ${EXTRA_PIP_ARGS} -r /requirements-3.9.txt \
  \
  && ls -al /wheels/ /wheels-3.9/

FROM scratch

COPY --from=build /wheels /wheels
COPY --from=build /wheels-3.9 /wheels-3.9
