# This is a monster of a Dockerfile.
# For some reason the command autoreconf CANNOT be run under QEMU, which breaks cross-building.
# To work around this, each library that needs autoreconf is downloaded and "autoreconf'd" in a amd64 image
# and the result is then copied back into the aarch64 image using multistages to run configure and make.

ARG UBUNTU_VERSION
ARG JETPACK_VERSION
FROM ubuntu:${UBUNTU_VERSION} as amd64-build
ENV \
  DEBIAN_FRONTEND=noninteractive
RUN \
  apt-get update && apt-get install -y --no-install-recommends \
  autoconf \
  automake \
  ca-certificates \
  curl \
  libtool \
  pkg-config

FROM amd64-build as opus
ARG OPUS_VERSION
ARG OPUS_SHA256SUM
RUN \
  DIR=/tmp/opus && \
  mkdir -p ${DIR} && \
  cd ${DIR} && \
  curl -sLO https://archive.mozilla.org/pub/opus/opus-${OPUS_VERSION}.tar.gz && \
  echo ${OPUS_SHA256SUM} | sha256sum --check && \
  tar -zx --strip-components=1 -f opus-${OPUS_VERSION}.tar.gz && \
  autoreconf -fiv

FROM amd64-build as fdk-aac
ARG FDKAAC_VERSION
RUN \
  DIR=/tmp/fdk-aac && \
  mkdir -p ${DIR} && \
  cd ${DIR} && \
  curl -sL https://github.com/mstorsjo/fdk-aac/archive/v${FDKAAC_VERSION}.tar.gz | \
  tar -zx --strip-components=1 && \
  autoreconf -fiv

FROM amd64-build as fribidi
ARG FRIBIDI_VERSION
ARG FRIBIDI_SHA256SUM
RUN  \
  DIR=/tmp/fribidi && \
  mkdir -p ${DIR} && \
  cd ${DIR} && \
  curl -sLO https://github.com/fribidi/fribidi/archive/${FRIBIDI_VERSION}.tar.gz && \
  echo ${FRIBIDI_SHA256SUM} | sha256sum --check && \
  tar -zx --strip-components=1 -f ${FRIBIDI_VERSION}.tar.gz && \
  export NOCONFIGURE=1 && \
  DIR=/tmp/fribidi && \
  cd ${DIR} && \
  ./autogen.sh

FROM amd64-build as libass
ARG LIBASS_VERSION
ARG LIBASS_SHA256SUM
RUN  \
  DIR=/tmp/libass && \
  mkdir -p ${DIR} && \
  cd ${DIR} && \
  curl -sLO https://github.com/libass/libass/archive/${LIBASS_VERSION}.tar.gz && \
  echo ${LIBASS_SHA256SUM} | sha256sum --check && \
  tar -zx --strip-components=1 -f ${LIBASS_VERSION}.tar.gz && \
  DIR=/tmp/libass && \
  cd ${DIR} && \
  ./autogen.sh

FROM amd64-build as kvazaar
ARG KVAZAAR_VERSION
RUN \
  DIR=/tmp/kvazaar && \
  mkdir -p ${DIR} && \
  cd ${DIR} && \
  curl -sLO https://github.com/ultravideo/kvazaar/archive/v${KVAZAAR_VERSION}.tar.gz && \
  tar -zx --strip-components=1 -f v${KVAZAAR_VERSION}.tar.gz && \
  DIR=/tmp/kvazaar && \
  cd ${DIR} && \
  ./autogen.sh

FROM amd64-build as libxcb
ARG XORG_MACROS_VERSION
RUN \
  DIR=/tmp/xorg-macros && \
  mkdir -p ${DIR} && \
  cd ${DIR} && \
  curl -sLO https://www.x.org/archive//individual/util/util-macros-${XORG_MACROS_VERSION}.tar.gz && \
  tar -zx --strip-components=1 -f util-macros-${XORG_MACROS_VERSION}.tar.gz && \
  ./configure --srcdir=${DIR} --prefix="${PREFIX}" && \
  make && \
  make install && \
  rm -rf ${DIR}

FROM amd64-build as libxml2
ENV PREFIX=/opt/ffmpeg
ARG LIBXML2_VERSION
ARG LIBXML2_SHA256SUM
RUN \
  DIR=/tmp/libxml2 && \
  mkdir -p ${DIR} && \
  cd ${DIR} && \
  curl -sLO https://gitlab.gnome.org/GNOME/libxml2/-/archive/v${LIBXML2_VERSION}/libxml2-v${LIBXML2_VERSION}.tar.gz && \
  echo ${LIBXML2_SHA256SUM} | sha256sum --check && \
  tar -xz --strip-components=1 -f libxml2-v${LIBXML2_VERSION}.tar.gz && \
  DIR=/tmp/libxml2 && \
  cd ${DIR} && \
  ./autogen.sh --prefix="${PREFIX}" --with-ftp=no --with-http=no --with-python=no

FROM amd64-build as libzmq
ARG LIBZMQ_VERSION
ARG LIBZMQ_SHA256SUM
RUN \
  DIR=/tmp/libzmq && \
  mkdir -p ${DIR} && \
  cd ${DIR} && \
  curl -sLO https://github.com/zeromq/libzmq/archive/v${LIBZMQ_VERSION}.tar.gz && \
  echo ${LIBZMQ_SHA256SUM} | sha256sum --check && \
  tar -xz --strip-components=1 -f v${LIBZMQ_VERSION}.tar.gz && \
  DIR=/tmp/libzmq && \
  cd ${DIR} && \
  ./autogen.sh


FROM balenalib/jetson-nano-ubuntu:${UBUNTU_VERSION}-build as qemu
FROM nvcr.io/nvidia/l4t-base:${JETPACK_VERSION} as build

COPY --from=qemu /usr/bin/qemu-aarch64-static /usr/bin/qemu-aarch64-static
COPY --from=qemu /usr/bin/cross-build-start /bin/cross-build-start
COPY --from=qemu /usr/bin/cross-build-end /bin/cross-build-end
COPY --from=qemu /usr/bin/resin-xbuild /usr/bin/resin-xbuild

ARG BUILDPLATFORM
RUN \
  echo "Build platform: $BUILDPLATFORM" && \
  if [ "$BUILDPLATFORM" = "linux/amd64" ]; then \
  echo "Crossbuilding!" && cross-build-start; \
  fi

WORKDIR /tmp/workdir

ARG MAKEFLAGS="-j2"

ENV \
  DEBIAN_FRONTEND=noninteractive \
  SRC=/usr/local \
  PATH=/usr/custom_cmake/bin:$PATH \
  PKG_CONFIG_PATH="/opt/ffmpeg/share/pkgconfig:/opt/ffmpeg/lib/pkgconfig:/opt/ffmpeg/lib64/pkgconfig" \
  PREFIX=/opt/ffmpeg \
  LD_LIBRARY_PATH="/opt/ffmpeg/lib:/opt/ffmpeg/lib64:/usr/lib64:/usr/lib:/usr/lib/aarch64-linux-gnu/tegra:/usr/lib/aarch64-linux-gnu/tegra-egl"

RUN \
  apt-get update && apt-get install -y --no-install-recommends \
  ca-certificates \
  gnupg && \
  echo "deb https://repo.download.nvidia.com/jetson/common r32.5 main" >>  /etc/apt/sources.list.d/nvidia.list && \
  echo "deb https://repo.download.nvidia.com/jetson/t210 r32.5 main" >>  /etc/apt/sources.list.d/nvidia.list && \
  apt-key adv --fetch-key http://repo.download.nvidia.com/jetson/jetson-ota-public.asc && \
  mkdir -p /opt/nvidia/l4t-packages/ && touch /opt/nvidia/l4t-packages/.nv-l4t-disable-boot-fw-update-in-preinstall && \
  rm -r /etc/ld.so.conf.d/nvidia-tegra.conf && \
  \
  apt-get update && apt-get install -y --no-install-recommends && \
  buildDeps="autoconf \
  automake \
  ca-certificates \
  cmake \
  curl \
  bzip2 \
  libexpat1-dev \
  g++ \
  gcc \
  git \
  gperf \
  libtool \
  make \
  nasm \
  perl \
  pkg-config \
  python3 \
  libssl-dev \
  yasm \
  libgomp1 \
  zlib1g-dev \
  libfreetype6-dev \
  libv4l-dev \
  nvidia-l4t-jetson-multimedia-api" && \
  apt-get -yqq update && \
  apt-get install -yq --no-install-recommends ${buildDeps}

### opencore-amr https://sourceforge.net/projects/opencore-amr/
ARG OPENCOREAMR_VERSION
RUN \
  DIR=/tmp/opencore-amr && \
  mkdir -p ${DIR} && \
  cd ${DIR} && \
  curl -sL https://versaweb.dl.sourceforge.net/project/opencore-amr/opencore-amr/opencore-amr-${OPENCOREAMR_VERSION}.tar.gz | \
  tar -zx --strip-components=1 && \
  ./configure --prefix="${PREFIX}" --enable-shared  && \
  make && \
  make install && \
  rm -rf ${DIR}
### x264 http://www.videolan.org/developers/x264.html
ARG X264_VERSION
RUN \
  DIR=/tmp/x264 && \
  mkdir -p ${DIR} && \
  cd ${DIR} && \
  curl -sL https://download.videolan.org/pub/videolan/x264/snapshots/x264-snapshot-${X264_VERSION}.tar.bz2 | \
  tar -jx --strip-components=1 && \
  ./configure --prefix="${PREFIX}" --enable-shared --enable-pic --disable-cli && \
  make && \
  make install && \
  rm -rf ${DIR}
### x265 http://x265.org/
ARG X265_VERSION
RUN \
  DIR=/tmp/x265 && \
  mkdir -p ${DIR} && \
  cd ${DIR} && \
  curl -sL https://download.videolan.org/pub/videolan/x265/x265_${X265_VERSION}.tar.gz  | \
  tar -zx && \
  cd x265_${X265_VERSION}/build/linux && \
  sed -i "/-DEXTRA_LIB/ s/$/ -DCMAKE_INSTALL_PREFIX=\${PREFIX}/" multilib.sh && \
  sed -i "/^cmake/ s/$/ -DENABLE_CLI=OFF/" multilib.sh && \
  export CXXFLAGS="${CXXFLAGS} -fPIC" && \
  ./multilib.sh && \
  make -C 8bit install && \
  rm -rf ${DIR}
### libogg https://www.xiph.org/ogg/
ARG OGG_VERSION
ARG OGG_SHA256SUM
RUN \
  DIR=/tmp/ogg && \
  mkdir -p ${DIR} && \
  cd ${DIR} && \
  curl -sLO http://downloads.xiph.org/releases/ogg/libogg-${OGG_VERSION}.tar.gz && \
  echo ${OGG_SHA256SUM} | sha256sum --check && \
  tar -zx --strip-components=1 -f libogg-${OGG_VERSION}.tar.gz && \
  ./configure --prefix="${PREFIX}" --enable-shared  && \
  make && \
  make install && \
  rm -rf ${DIR}
### libopus https://www.opus-codec.org/
COPY --from=opus /tmp/opus /tmp/opus
RUN \
  DIR=/tmp/opus && \
  mkdir -p ${DIR} && \
  cd ${DIR} && \
  ./configure --prefix="${PREFIX}" --enable-shared && \
  make && \
  make install && \
  rm -rf ${DIR}
### libvorbis https://xiph.org/vorbis/
ARG VORBIS_VERSION
ARG VORBIS_SHA256SUM
RUN \
  DIR=/tmp/vorbis && \
  mkdir -p ${DIR} && \
  cd ${DIR} && \
  curl -sLO http://downloads.xiph.org/releases/vorbis/libvorbis-${VORBIS_VERSION}.tar.gz && \
  echo ${VORBIS_SHA256SUM} | sha256sum --check && \
  tar -zx --strip-components=1 -f libvorbis-${VORBIS_VERSION}.tar.gz && \
  ./configure --prefix="${PREFIX}" --with-ogg="${PREFIX}" --enable-shared && \
  make && \
  make install && \
  rm -rf ${DIR}
### libtheora http://www.theora.org/
ARG THEORA_VERSION
ARG THEORA_SHA256SUM
RUN \
  DIR=/tmp/theora && \
  mkdir -p ${DIR} && \
  cd ${DIR} && \
  curl -sLO http://downloads.xiph.org/releases/theora/libtheora-${THEORA_VERSION}.tar.gz && \
  echo ${THEORA_SHA256SUM} | sha256sum --check && \
  tar -zx --strip-components=1 -f libtheora-${THEORA_VERSION}.tar.gz && \
  # config.guess and config.sub supplied by theora is too old to recognize aarch64, download manually
  curl -SLo config.guess "http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess;hb=HEAD" && \
  curl -SLo config.sub "http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub;hb=HEAD" && \
  ./configure --prefix="${PREFIX}" --with-ogg="${PREFIX}" --enable-shared --disable-examples && \
  make && \
  make install && \
  rm -rf ${DIR}
### libvpx https://www.webmproject.org/code/
ARG VPX_VERSION
RUN \
  DIR=/tmp/vpx && \
  mkdir -p ${DIR} && \
  cd ${DIR} && \
  curl -sL https://codeload.github.com/webmproject/libvpx/tar.gz/v${VPX_VERSION} | \
  tar -zx --strip-components=1 && \
  ./configure --prefix="${PREFIX}" --enable-vp8 --enable-vp9 --enable-vp9-highbitdepth --enable-pic --enable-shared \
  --disable-debug --disable-examples --disable-docs --disable-install-bins  && \
  make && \
  make install && \
  rm -rf ${DIR}
### libwebp https://developers.google.com/speed/webp/
ARG WEBP_VERSION
RUN \
  DIR=/tmp/vebp && \
  mkdir -p ${DIR} && \
  cd ${DIR} && \
  curl -sL https://storage.googleapis.com/downloads.webmproject.org/releases/webp/libwebp-${WEBP_VERSION}.tar.gz | \
  tar -zx --strip-components=1 && \
  ./configure --prefix="${PREFIX}" --enable-shared  && \
  make && \
  make install && \
  rm -rf ${DIR}
### libmp3lame http://lame.sourceforge.net/
ARG LAME_VERSION
RUN \
  DIR=/tmp/lame && \
  mkdir -p ${DIR} && \
  cd ${DIR} && \
  curl -sL https://versaweb.dl.sourceforge.net/project/lame/lame/$(echo ${LAME_VERSION} | sed -e 's/[^0-9]*\([0-9]*\)[.]\([0-9]*\)[.]\([0-9]*\)\([0-9A-Za-z-]*\)/\1.\2/')/lame-${LAME_VERSION}.tar.gz | \
  tar -zx --strip-components=1 && \
  ./configure --prefix="${PREFIX}" --bindir="${PREFIX}/bin" --enable-shared --enable-nasm --disable-frontend && \
  make && \
  make install && \
  rm -rf ${DIR}
### xvid https://www.xvid.com/
ARG XVID_VERSION
ARG XVID_SHA256SUM
RUN \
  DIR=/tmp/xvid && \
  mkdir -p ${DIR} && \
  cd ${DIR} && \
  curl -sLO http://downloads.xvid.org/downloads/xvidcore-${XVID_VERSION}.tar.gz && \
  echo ${XVID_SHA256SUM} | sha256sum --check && \
  tar -zx -f xvidcore-${XVID_VERSION}.tar.gz && \
  cd xvidcore/build/generic && \
  ./configure --prefix="${PREFIX}" --bindir="${PREFIX}/bin" && \
  make && \
  make install && \
  rm -rf ${DIR}
### fdk-aac https://github.com/mstorsjo/fdk-aac
COPY --from=fdk-aac /tmp /tmp
RUN \
  DIR=/tmp/fdk-aac && \
  cd ${DIR} && \
  ./configure --prefix="${PREFIX}" --enable-shared --datadir="${DIR}" && \
  make && \
  make install && \
  rm -rf ${DIR}
### openjpeg https://github.com/uclouvain/openjpeg
ARG OPENJPEG_VERSION
RUN \
  DIR=/tmp/openjpeg && \
  mkdir -p ${DIR} && \
  cd ${DIR} && \
  curl -sL https://github.com/uclouvain/openjpeg/archive/v${OPENJPEG_VERSION}.tar.gz | \
  tar -zx --strip-components=1 && \
  export CFLAGS="${CFLAGS} -DPNG_ARM_NEON_OPT=0" && \
  cmake -DBUILD_THIRDPARTY:BOOL=ON -DCMAKE_INSTALL_PREFIX="${PREFIX}" . && \
  make && \
  make install && \
  rm -rf ${DIR}
### Fontconfig installation breaks if Freetyoe is built from source so it is omitted here.
### Probably has something to do with a version mismatch that i won't investigate
### freetype https://www.freetype.org/
# ARG FREETYPE_VERSION
# ARG FREETYPE_SHA256SUM
# RUN  \
#   DIR=/tmp/freetype && \
#   mkdir -p ${DIR} && \
#   cd ${DIR} && \
#   curl -sLO https://download.savannah.gnu.org/releases/freetype/freetype-${FREETYPE_VERSION}.tar.gz && \
#   echo ${FREETYPE_SHA256SUM} | sha256sum --check && \
#   tar -zx --strip-components=1 -f freetype-${FREETYPE_VERSION}.tar.gz && \
#   ./configure --prefix="${PREFIX}" --disable-static --enable-shared && \
#   make && \
#   make install && \
#   rm -rf ${DIR}
### libvstab https://github.com/georgmartius/vid.stab
ARG LIBVIDSTAB_VERSION
ARG LIBVIDSTAB_SHA256SUM
RUN  \
  DIR=/tmp/vid.stab && \
  mkdir -p ${DIR} && \
  cd ${DIR} && \
  curl -sLO https://github.com/georgmartius/vid.stab/archive/${LIBVIDSTAB_VERSION}.tar.gz && \
  echo ${LIBVIDSTAB_SHA256SUM} | sha256sum --check &&  \
  tar -zx --strip-components=1 -f ${LIBVIDSTAB_VERSION}.tar.gz && \
  cmake -DCMAKE_INSTALL_PREFIX="${PREFIX}" -DSSE2_FOUND=OFF . && \
  make && \
  make install && \
  rm -rf ${DIR}
### fridibi https://www.fribidi.org/
COPY --from=fribidi /tmp /tmp
RUN \
  DIR=/tmp/fribidi && \
  cd ${DIR} && \
  ./configure --prefix="${PREFIX}" --disable-static --enable-shared && \
  # Use -j1 because fribidi breaks when building in parallel and c2man is not installed
  make -j1 && \
  make install && \
  rm -rf ${DIR}
### fontconfig https://www.freedesktop.org/wiki/Software/fontconfig/
ARG FONTCONFIG_VERSION
RUN  \
  DIR=/tmp/fontconfig && \
  mkdir -p ${DIR} && \
  cd ${DIR} && \
  curl -sLO https://www.freedesktop.org/software/fontconfig/release/fontconfig-${FONTCONFIG_VERSION}.tar.bz2 && \
  tar -jx --strip-components=1 -f fontconfig-${FONTCONFIG_VERSION}.tar.bz2 && \
  ./configure --prefix="${PREFIX}" --disable-static --enable-shared && \
  make && \
  make install && \
  rm -rf ${DIR}
### libass https://github.com/libass/libass
COPY --from=libass /tmp /tmp
RUN \
  DIR=/tmp/libass && \
  cd ${DIR} && \
  ./configure --prefix="${PREFIX}" --disable-static --enable-shared && \
  make && \
  make install && \
  rm -rf ${DIR}
### kvazaar https://github.com/ultravideo/kvazaar
COPY --from=kvazaar /tmp /tmp
RUN \
  DIR=/tmp/kvazaar && \
  cd ${DIR} && \
  ./configure --prefix="${PREFIX}" --disable-static --enable-shared && \
  make && \
  make install && \
  rm -rf ${DIR}
### aom https://aomedia.googlesource.com/aom
ARG AOM_VERSION
RUN \
  DIR=/tmp/aom && \
  git clone --branch v${AOM_VERSION} --depth 1 https://aomedia.googlesource.com/aom ${DIR} && \
  cd ${DIR} && \
  rm -rf CMakeCache.txt CMakeFiles && \
  mkdir -p ./aom_build && \
  cd ./aom_build && \
  cmake -DCMAKE_INSTALL_PREFIX="${PREFIX}" -DENABLE_TESTS=0 .. && \
  make && \
  make install && \
  rm -rf ${DIR}
### libxcb (and supporting libraries) for screen capture https://xcb.freedesktop.org/
ARG XORG_MACROS_VERSION
RUN \
  DIR=/tmp/xorg-macros && \
  mkdir -p ${DIR} && \
  cd ${DIR} && \
  curl -sLO https://www.x.org/archive//individual/util/util-macros-${XORG_MACROS_VERSION}.tar.gz && \
  tar -zx --strip-components=1 -f util-macros-${XORG_MACROS_VERSION}.tar.gz && \
  ./configure --srcdir=${DIR} --prefix="${PREFIX}" && \
  make && \
  make install && \
  rm -rf ${DIR}

ARG XPROTO_VERSION
RUN \
  DIR=/tmp/xproto && \
  mkdir -p ${DIR} && \
  cd ${DIR} && \
  curl -sLO https://www.x.org/archive/individual/proto/xproto-${XPROTO_VERSION}.tar.gz && \
  tar -zx --strip-components=1 -f xproto-${XPROTO_VERSION}.tar.gz && \
  # config.guess and config.sub supplied by xproto is too old to recognize aarch64, download manually
  curl -SLo config.guess "http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess;hb=HEAD" && \
  curl -SLo config.sub "http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub;hb=HEAD" && \
  ./configure --srcdir=${DIR} --prefix="${PREFIX}" && \
  make && \
  make install && \
  rm -rf ${DIR}

ARG XAU_VERSION
RUN \
  DIR=/tmp/libXau && \
  mkdir -p ${DIR} && \
  cd ${DIR} && \
  curl -sLO https://www.x.org/archive/individual/lib/libXau-${XAU_VERSION}.tar.gz && \
  tar -zx --strip-components=1 -f libXau-${XAU_VERSION}.tar.gz && \
  ./configure --srcdir=${DIR} --prefix="${PREFIX}" && \
  make && \
  make install && \
  rm -rf ${DIR}

ARG LIBPTHREAD_STUBS_VERSION
RUN \
  DIR=/tmp/libpthread-stubs && \
  mkdir -p ${DIR} && \
  cd ${DIR} && \
  curl -sLO https://xcb.freedesktop.org/dist/libpthread-stubs-${LIBPTHREAD_STUBS_VERSION}.tar.gz && \
  tar -zx --strip-components=1 -f libpthread-stubs-${LIBPTHREAD_STUBS_VERSION}.tar.gz && \
  ./configure --prefix="${PREFIX}" && \
  make && \
  make install && \
  rm -rf ${DIR}
### libxml2 - for libbluray
COPY --from=libxml2 /tmp /tmp
RUN \
  DIR=/tmp/libxml2 && \
  cd ${DIR} && \
  make && \
  make install && \
  rm -rf ${DIR}
### libbluray - Requires libxml, freetype, and fontconfig
ARG LIBBLURAY_VERSION
ARG LIBBLURAY_SHA256SUM
RUN \
  DIR=/tmp/libbluray && \
  mkdir -p ${DIR} && \
  cd ${DIR} && \
  curl -sLO https://download.videolan.org/pub/videolan/libbluray/${LIBBLURAY_VERSION}/libbluray-${LIBBLURAY_VERSION}.tar.bz2 && \
  echo ${LIBBLURAY_SHA256SUM} | sha256sum --check && \
  tar -jx --strip-components=1 -f libbluray-${LIBBLURAY_VERSION}.tar.bz2 && \
  ./configure --prefix="${PREFIX}" --disable-examples --disable-bdjava-jar --disable-static --enable-shared && \
  make && \
  make install && \
  rm -rf ${DIR}
### libzmq https://github.com/zeromq/libzmq/
COPY --from=libzmq /tmp /tmp
RUN \
  DIR=/tmp/libzmq && \
  cd ${DIR} && \
  ./configure --prefix="${PREFIX}" && \
  make && \
  make install && \
  rm -rf ${DIR}
# Jetson Nano hwaccel decoder/encoder
RUN git clone https://github.com/jocover/jetson-ffmpeg && \
  cd jetson-ffmpeg && \
  mkdir build && \
  cd build && \
  cmake -DCMAKE_INSTALL_PREFIX=${PREFIX} .. && \
  make && \
  make install && \
  ldconfig
### ffmpeg https://ffmpeg.org/
ARG FFMPEG_VERSION
RUN  \
  DIR=/tmp/ffmpeg && mkdir -p ${DIR} && cd ${DIR} && \
  curl -sLO https://ffmpeg.org/releases/ffmpeg-${FFMPEG_VERSION}.tar.bz2 && \
  tar -jx --strip-components=1 -f ffmpeg-${FFMPEG_VERSION}.tar.bz2 && \
  wget https://github.com/jocover/jetson-ffmpeg/raw/master/ffmpeg_nvmpi.patch && \
  # Apply patch but only to add nvmpi_enc.c and nvmpi_dec.c
  git apply ffmpeg_nvmpi.patch && \
  DIR=/tmp/ffmpeg && mkdir -p ${DIR} && cd ${DIR} && \
  ./configure \
  --disable-debug \
  --disable-doc \
  --disable-ffplay \
  --enable-shared \
  --enable-libopencore-amrnb \
  --enable-libopencore-amrwb \
  --enable-gpl \
  --enable-libass \
  --enable-fontconfig \
  --enable-libfreetype \
  --enable-libvidstab \
  --enable-libmp3lame \
  --enable-libopus \
  --enable-libtheora \
  --enable-libvorbis \
  --enable-libvpx \
  --enable-libwebp \
  --enable-libx265 \
  --enable-libxvid \
  --enable-libx264 \
  --enable-nonfree \
  --enable-openssl \
  --enable-libfdk_aac \
  --enable-postproc \
  --enable-small \
  --enable-version3 \
  --enable-libbluray \
  --enable-libzmq \
  --extra-libs=-ldl \
  --prefix="${PREFIX}" \
  --enable-libopenjpeg \
  --enable-libkvazaar \
  --enable-libaom \
  --extra-libs=-lpthread \
  # --enable-mmal \
  --enable-neon \
  # --enable-omx \
  # --enable-omx-rpi \
  --enable-v4l2_m2m \
  --enable-nvmpi \
  --extra-cflags="-I${PREFIX}/include" \
  --extra-ldflags="-L${PREFIX}/lib" && \
  make && \
  make install && \
  make tools/zmqsend && cp tools/zmqsend ${PREFIX}/bin/ && \
  make distclean && \
  hash -r && \
  cd tools && \
  make qt-faststart && cp qt-faststart ${PREFIX}/bin/

### cleanup
RUN \
  ldd ${PREFIX}/bin/ffmpeg | grep opt/ffmpeg | cut -d ' ' -f 3 | xargs -i cp {} /usr/local/lib/ && \
  for lib in /usr/local/lib/*.so.*; do ln -s "${lib##*/}" "${lib%%.so.*}".so; done && \
  cp ${PREFIX}/bin/* /usr/local/bin/ && \
  cp -r ${PREFIX}/share/ffmpeg /usr/local/share/ && \
  # Can't run this since it errors out on buildphase. FFmpeg for Jetson nano only works when running with --runtime nvidia --privileged
  # LD_LIBRARY_PATH=/usr/local/lib ffmpeg -buildconf && \
  cp -r ${PREFIX}/include/libav* ${PREFIX}/include/libpostproc ${PREFIX}/include/libsw* /usr/local/include && \
  mkdir -p /usr/local/lib/pkgconfig && \
  for pc in ${PREFIX}/lib/pkgconfig/libav*.pc ${PREFIX}/lib/pkgconfig/libpostproc.pc ${PREFIX}/lib/pkgconfig/libsw*.pc; do \
  sed "s:${PREFIX}:/usr/local:g" <"$pc" >/usr/local/lib/pkgconfig/"${pc##*/}"; \
  done

FROM scratch
COPY --from=build /usr/local /usr/local/

# FROM nvcr.io/nvidia/l4t-base:${JETPACK_VERSION}

# COPY --from=qemu /usr/bin/qemu-aarch64-static /usr/bin/qemu-aarch64-static
# COPY --from=qemu /usr/bin/cross-build-start /bin/cross-build-start
# COPY --from=qemu /usr/bin/cross-build-end /bin/cross-build-end
# COPY --from=qemu /usr/bin/resin-xbuild /usr/bin/resin-xbuild

# RUN [ "cross-build-start" ]
# COPY --from=build /usr/local /usr/local/

# ENV LD_LIBRARY_PATH="/usr/lib/aarch64-linux-gnu/tegra:/usr/lib/aarch64-linux-gnu/tegra-egl"

# RUN \
#   apt-get update && apt-get install -y --no-install-recommends \
#   ca-certificates \
#   gnupg && \
#   echo "deb https://repo.download.nvidia.com/jetson/common r32.5 main" >>  /etc/apt/sources.list.d/nvidia.list && \
#   echo "deb https://repo.download.nvidia.com/jetson/t210 r32.5 main" >>  /etc/apt/sources.list.d/nvidia.list && \
#   apt-key adv --fetch-key http://repo.download.nvidia.com/jetson/jetson-ota-public.asc && \
#   mkdir -p /opt/nvidia/l4t-packages/ && touch /opt/nvidia/l4t-packages/.nv-l4t-disable-boot-fw-update-in-preinstall && \
#   rm -r /etc/ld.so.conf.d/nvidia-tegra.conf && \
#   apt-get -yqq update && \
#   apt-get install -yq --no-install-recommends \
#   # L4T
#   nvidia-l4t-multimedia-utils \
#   # ffmpeg
#   libv4l-dev \
#   libharfbuzz-bin \
#   libegl1 \
#   libfreetype6

# RUN [ "cross-build-end" ]

# Skip building FFmpeg for now. It is installed from apt in Dockerfile.base
FROM balenalib/aarch64-ubuntu:${UBUNTU_VERSION}-build as skip-ffmpeg
RUN rm -r /usr/local && mkdir /usr/local

FROM scratch
COPY --from=skip-ffmpeg /usr/local /usr/local/
